#!/usr/bin/env python3
#
# Jailhouse, a Linux-based partitioning hypervisor
#
# Copyright (c) Siemens AG, 2020
#
# Authors:
#  Jan Kiszka <jan.kiszka@siemens.com>
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.
#
# This script should help to create a basic jailhouse configuration file.
# It needs to be executed on the target machine, where it will gather
# information about the system. For more advanced scenarios you will have
# to change the generated C-code.

import argparse
import os
import sys

# Imports from directory containing this must be done before the following
sys.path[0] = os.path.dirname(os.path.abspath(__file__)) + "/.."
import pyjailhouse.config as config

# pretend to be part of the jailhouse tool
sys.argv[0] = sys.argv[0].replace('-', ' ')

parser = argparse.ArgumentParser(description='Check system and cell configurations.')
parser.add_argument('syscfg', metavar='SYSCONFIG',
                    type=argparse.FileType('rb'),
                    help='system configuration file')
parser.add_argument('cellcfgs', metavar='CELLCONFIG', nargs="*",
                    type=argparse.FileType('rb'),
                    help='cell configuration file')

try:
    args = parser.parse_args()
except IOError as e:
    print(e.strerror, file=sys.stderr)
    exit(1)

print("Reading configuration set:")

try:
    sysconfig = config.parse(args.syscfg, config.System)
    root_cell = sysconfig.root_cell
except RuntimeError as e:
    print(str(e) + ": " + args.syscfg.name, file=sys.stderr)
    exit(1)

cells = [root_cell]
print("  Root cell:     %s (%s)" % (root_cell.name, args.syscfg.name))

non_root_cells = []
for cfg in args.cellcfgs:
    try:
        cell = config.parse(cfg, config.Cell)
    except RuntimeError as e:
        print(str(e) + ": " + cfg.name, file=sys.stderr)
        exit(1)
    non_root_cells.append(cell)
    cells.append(cell)
    print("  Non-root cell: %s (%s)" % (cell.name, cfg.name))

ret=0

# Memory checks
print("Overlapping memory regions inside cell:", end='')
found=False
for cell in cells:
    for mem in cell.memory_regions:
        idx = cell.memory_regions.index(mem)
        for mem2 in cell.memory_regions[idx + 1:]:
            idx2 = cell.memory_regions.index(mem2)
            overlaps = []
            if (mem.phys_overlaps(mem2)):
                overlaps.append("physically")
            if (mem.virt_overlaps(mem2)):
                overlaps.append("virtually")
            if overlaps:
                print("\n\nIn cell '%s', region %d" % (cell.name, idx))
                print(str(mem))
                print(" and ".join(overlaps) + \
                    " overlaps with region %d\n" % idx2 + str(mem2), end='')
                found=True
                ret=1
print("\n" if found else " None")

print("Overlapping memory regions with hypervisor:", end='')
found=False
for cell in cells:
    for mem in cell.memory_regions:
        if mem.phys_overlaps(sysconfig.hypervisor_memory):
            print("\n\nIn cell '%s', region %d" % (cell.name, idx))
            print(str(mem))
            print("overlaps with hypervisor memory region")
            print(str(sysconfig.hypervisor_memory), end='')
            found=True
            ret=1
print("\n" if found else " None")

# CPU checks
print("Overlapping CPUs between cells:", end='')
found = False
for cell in non_root_cells:
    cell_idx = cells.index(cell)
    for cell2 in cells[cell_idx + 1:]:
        overlap = cell.cpu_set & cell2.cpu_set
        if overlap:
            print("\n\nIn cell '%s' and '%s' following CPUs overlap: %s" %
                  (cell.name, cell2.name, str(overlap)), end='')
            found = True
            ret = 1
print("\n" if found else " None")

print("CPUs not in root cell CPU set:", end='')
found = False
for cell in non_root_cells:
    diff = cell.cpu_set - root_cell.cpu_set
    if diff:
        print("\n\nIn cell '%s': %s" % (cell.name, str(diff)), end='')
        found = True
        ret = 1
if found:
    print("\nNote: root cell CPU set: %s\n" % str(root_cell.cpu_set))
else:
    print(" None")

exit(ret)
